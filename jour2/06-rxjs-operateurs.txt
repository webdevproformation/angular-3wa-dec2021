filter() => supprimer le ou les éléments émis qui ne répondent pas critères recherché

// https://xgrommx.github.io/rx-book/content/which_operator_do_i_use/instance_operators.html


array en javascript =>

map() 
reduce()
find()
filter()

take()
tap()

pluck()
mergeMap()

.... 

data => stream (rxjs) => pipe() traitement  => flux$.subscribe( (data) => this.articles = data )

ng g c operateurs


// cas pratique créer le composant exo2 

1 créer une variable joueurs contenant la collection suivante :
[
  { id: 1, name: 'alan', score: 50 },
  { id: 2, name: 'albert', score: 150 },
  { id: 3, name: 'xavier', score: 0 },
  { id: 4, name: 'benoit', score: 5 },
  { id: 5, name: 'phil', score: 17 },
  { id: 6, name: 'sophie', score: 45 },
  { id: 7, name: 'stephan', score: 900 },
  { id: 8, name: 'elie', score: 178 },
  { id: 9, name: 'tony', score: 15 },
  { id: 10, name: 'robert', score: 11 },
  { id: 11, name: 'gerard', score: 8 },
  { id: 12, name: 'sandra', score: 6 },
  { id: 13, name: 'caroline', score: 23 }
];

2 via l'opérateur rxjs filter() déterminer les joueurs dont le score >= 100

3 via l'opérateur rxjs map() ajouter une majuscule sur le name de chaque joueur (sur la première lettre)


4 via l'opérateur rxjs map() + filter ajouter une majuscule sur le name de chaque joueur (sur la première lettre) uniquement pour les joueurs qui ont un score inférieur à 100

5 via l'opérateur find retourner l'utilisateur dont le nom est stephan 


